openapi: 3.0.0
info:
    title: HRIS API
    description: API documentation for Human Resource Information System
    version: 1.0.0
    contact:
        name: SukaMaju
servers:
    - url: http://localhost:8080/v1
      description: Development server

components:
    securitySchemes:
        bearerAuth:
            type: http
            scheme: bearer
            bearerFormat: JWT
    schemas:
        User:
            type: object
            description: Represents a user account in the system.
            properties:
                id:
                    type: integer
                    format: uint
                    description: Unique identifier for the user.
                    readOnly: true
                    example: 1
                email:
                    type: string
                    format: email
                    maxLength: 255
                    description: User's unique email address. Required for login.
                    example: "john.doe@example.com"
                phone:
                    type: string
                    maxLength: 20
                    nullable: true
                    description: User's unique phone number (optional).
                    example: "+6281234567890"
                role:
                    type: string
                    description: Role assigned to the user, determining their permissions.
                    enum: [admin, user]
                    example: "user"
                last_login_at:
                    type: string
                    format: date-time
                    nullable: true
                    description: Timestamp of the user's last login (optional).
                    readOnly: true
                    example: "2024-07-15T10:00:00Z"
                created_at:
                    type: string
                    format: date-time
                    description: Timestamp when the user account was created.
                    readOnly: true
                updated_at:
                    type: string
                    format: date-time
                    description: Timestamp when the user account was last updated.
                    readOnly: true
            required:
                - email
                - role
                - created_at
                - updated_at

        Employee:
            type: object
            properties:
                id:
                    type: integer
                    format: uint
                    description: Unique identifier for the employee.
                    readOnly: true
                user_id:
                    type: integer
                    format: uint
                    description: Foreign key referencing the associated User ID.
                first_name:
                    type: string
                    maxLength: 255
                    description: Employee's first name.
                last_name:
                    type: string
                    maxLength: 255
                    description: Employee's last name.
                position_id:
                    type: integer
                    format: uint
                    description: Foreign key referencing the Position ID.
                employment_status:
                    type: boolean
                    description: Indicates if the employee is currently active. True for active, False for inactive.
                    default: true
                employee_code:
                    type: string
                    maxLength: 255
                    nullable: true
                    description: Unique code assigned to the employee (optional).
                branch_id:
                    type: integer
                    format: uint
                    nullable: true
                    description: Foreign key referencing the Branch ID (optional).
                gender:
                    type: string
                    nullable: true
                    description: Employee's gender (optional).
                    enum: [Male, Female]
                phone:
                    type: string
                    maxLength: 255
                    nullable: true
                    description: Employee's phone number (optional).
                nik:
                    type: string
                    maxLength: 16
                    nullable: true
                    description: Employee's National Identity Number (KTP number in Indonesia) (optional).
                place_of_birth:
                    type: string
                    maxLength: 255
                    nullable: true
                    description: Place where the employee was born (optional).
                date_of_birth:
                    type: string
                    format: date
                    nullable: true
                    description: Date when the employee was born (optional).
                last_education:
                    type: string
                    nullable: true
                    description: Employee's highest level of education completed (optional).
                    enum: [high_school, diploma, bachelor, master, doctorate]
                grade:
                    type: string
                    maxLength: 50
                    nullable: true
                    description: Employee's job grade or level (optional).
                contract_type:
                    type: string
                    nullable: true
                    description: Type of employment contract (optional).
                    enum: [permanent, contract, internship, freelance]
                resignation_date:
                    type: string
                    format: date
                    nullable: true
                    description: Date the employee resigned (optional).
                hire_date:
                    type: string
                    format: date
                    nullable: true
                    description: Date the employee was hired (optional).
                bank_name:
                    type: string
                    maxLength: 100
                    nullable: true
                    description: Name of the employee's bank (optional).
                bank_account_number:
                    type: string
                    maxLength: 100
                    nullable: true
                    description: Employee's bank account number (optional).
                bank_account_holder_name:
                    type: string
                    maxLength: 255
                    nullable: true
                    description: Name on the employee's bank account (optional).
                tax_status:
                    type: string
                    nullable: true
                    description: Employee's tax status (e.g., PTKP status in Indonesia) (optional).
                    enum:
                        [tk0, tk1, tk2, tk3, k0, k1, k2, k3, ki0, ki1, ki2, ki3]
                profile_photo_url:
                    type: string
                    maxLength: 255
                    format: url
                    nullable: true
                    description: URL to the employee's profile photo (optional).
                photo_file:
                    type: string
                    format: binary
                    description: "Profile photo file to upload (JPEG, PNG, GIF, WebP only). Alternative to profile_photo_url."
                created_at:
                    type: string
                    format: date-time
                    description: Timestamp when the record was created.
                    readOnly: true
                updated_at:
                    type: string
                    format: date-time
                    description: Timestamp when the record was last updated.
                    readOnly: true
            required:
                - user_id
                - first_name
                - last_name
                - position_id
                - employment_status
                - created_at
                - updated_at

        Position:
            type: object
            description: Represents a job position within the organization.
            properties:
                id:
                    type: integer
                    format: uint
                    description: Unique identifier for the position.
                    readOnly: true
                name:
                    type: string
                    maxLength: 255
                    description: The name of the position.
                hr_id:
                    type: integer
                    format: uint
                    description: Foreign key referencing the HR User ID who manages this position.
                created_at:
                    type: string
                    format: date-time
                    description: Timestamp when the position was created.
                    readOnly: true
                updated_at:
                    type: string
                    format: date-time
                    description: Timestamp when the position was last updated.
                    readOnly: true
            required:
                - name
                - hr_id
                - created_at
                - updated_at

        PositionCreateRequest:
            type: object
            description: Request body for creating a new position.
            properties:
                name:
                    type: string
                    maxLength: 255
                    description: The name of the position.
                    example: "Software Engineer"
            required:
                - name

        PositionUpdateRequest:
            type: object
            description: Request body for updating a position.
            properties:
                name:
                    type: string
                    maxLength: 255
                    description: The updated name of the position.
                    example: "Senior Software Engineer"
            required:
                - name

        Branch:
            type: object
            description: Represents a company branch or location.
            properties:
                id:
                    type: integer
                    format: uint
                    description: Unique identifier for the branch.
                    readOnly: true
                name:
                    type: string
                    maxLength: 255
                    description: The name of the branch.
                hr_id:
                    type: integer
                    format: uint
                    description: Foreign key referencing the HR User ID who manages this branch.
                created_at:
                    type: string
                    format: date-time
                    description: Timestamp when the branch was created.
                    readOnly: true
                updated_at:
                    type: string
                    format: date-time
                    description: Timestamp when the branch was last updated.
                    readOnly: true
            required:
                - name
                - hr_id
                - created_at
                - updated_at

        BranchCreateRequest:
            type: object
            description: Request body for creating a new branch.
            properties:
                name:
                    type: string
                    maxLength: 255
                    description: The name of the branch.
                    example: "Jakarta Office"
            required:
                - name

        BranchUpdateRequest:
            type: object
            description: Request body for updating a branch.
            properties:
                name:
                    type: string
                    maxLength: 255
                    description: The updated name of the branch.
                    example: "Jakarta Main Office"
            required:
                - name

        Location:
            type: object
            description: Represents a location in the system.
            properties:
                id:
                    type: integer
                    format: uint
                    description: Unique identifier for the location.
                    readOnly: true
                name:
                    type: string
                    maxLength: 255
                    description: The name of the location.
                address_detail:
                    type: string
                    description: The detail address of location.
                latitude:
                    type: number
                    description: The latitude of the location.
                longitude:
                    type: number
                    description: The longitude of the location.
                radius_m:
                    type: number
                    description: The radius of the location.
                created_at:
                    type: string
                    format: date-time
                    readOnly: true
                updated_at:
                    type: string
                    format: date-time
                    readOnly: true
            required:
                - name
                - address_detail
                - latitude
                - longitude
                - radius_m

        PaginationParams:
            type: object
            description: Parameters for pagination in API requests
            properties:
                page:
                    type: integer
                    minimum: 1
                    default: 1
                    description: The page number to retrieve (1-indexed)
                    example: 1
                page_size:
                    type: integer
                    minimum: 1
                    maximum: 100
                    default: 10
                    description: Number of items per page
                    example: 10
            required:
                - page
                - page_size

        WorkScheduleDetailRequest:
            type: object
            required:
                - worktype_detail
                - work_days
            properties:
                worktype_detail:
                    type: string
                    enum: ["WFO", "WFA"]
                    example: "WFO"
                work_days:
                    type: array
                    items:
                        type: string
                        enum:
                            [
                                "Monday",
                                "Tuesday",
                                "Wednesday",
                                "Thursday",
                                "Friday",
                                "Saturday",
                                "Sunday",
                            ]
                    example:
                        ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday"]
                checkin_start:
                    type: string
                    format: time # Should be "HH:MM:SS"
                    example: "08:00:00"
                    nullable: true
                checkin_end:
                    type: string
                    format: time
                    example: "09:00:00"
                    nullable: true
                break_start:
                    type: string
                    format: time
                    example: "12:00:00"
                    nullable: true
                break_end:
                    type: string
                    format: time
                    example: "13:00:00"
                    nullable: true
                checkout_start:
                    type: string
                    format: time
                    example: "17:00:00"
                    nullable: true
                checkout_end:
                    type: string
                    format: time
                    example: "18:00:00"
                    nullable: true
                location_id:
                    type: integer
                    format: uint
                    nullable: true
                    example: 1

        WorkScheduleCreateRequest:
            type: object
            required:
                - name
                - work_type
                - details
            properties:
                name:
                    type: string
                    example: "Hybrid Schedule Example"
                work_type:
                    type: string
                    enum: ["WFO", "WFA", "Hybrid"]
                    example: "Hybrid"
                details:
                    type: array
                    items:
                        $ref: "#/components/schemas/WorkScheduleDetailRequest"
                    minItems: 1
                    example:
                        - worktype_detail: "WFO"
                          work_days: ["Monday", "Tuesday", "Wednesday"]
                          checkin_start: "08:00:00"
                          checkin_end: "09:00:00"
                          break_start: "12:00:00"
                          break_end: "13:00:00"
                          checkout_start: "17:00:00"
                          checkout_end: "18:00:00"
                          location_id: 1
                        - worktype_detail: "WFA"
                          work_days: ["Thursday", "Friday"]
                          checkin_start: "08:00:00"
                          checkin_end: "10:00:00"
                          break_start: null
                          break_end: null
                          checkout_start: "17:00:00"
                          checkout_end: "18:00:00"
                          location_id: null # Use null for non-applicable ID

        WorkScheduleDetailResponse:
            type: object
            properties:
                id:
                    type: integer
                    format: uint
                    example: 1
                worktype_detail:
                    type: string
                    enum: ["WFO", "WFA"]
                    example: "WFO"
                work_days:
                    type: array
                    items:
                        type: string
                    example:
                        ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday"]
                checkin_start:
                    type: string
                    format: time
                    example: "08:00:00"
                    nullable: true
                checkin_end:
                    type: string
                    format: time
                    example: "09:00:00"
                    nullable: true
                break_start:
                    type: string
                    format: time
                    example: "12:00:00"
                    nullable: true
                break_end:
                    type: string
                    format: time
                    example: "13:00:00"
                    nullable: true
                checkout_start:
                    type: string
                    format: time
                    example: "17:00:00"
                    nullable: true
                checkout_end:
                    type: string
                    format: time
                    example: "18:00:00"
                    nullable: true
                location_id:
                    type: integer
                    format: uint
                    nullable: true
                    example: 1
                location_name:
                    type: string
                    nullable: true
                    example: "Main Office"
                location_address:
                    type: string
                    nullable: true
                    example: "123 Main St"
                location_lat:
                    type: number
                    format: double
                    nullable: true
                    example: -6.200000
                location_long:
                    type: number
                    format: double
                    nullable: true
                    example: 106.816666
                radius:
                    type: number
                    format: double
                    nullable: true
                    example: 100.5
                created_at:
                    type: string
                    format: date-time
                    example: "2024-01-01T12:00:00Z"
                updated_at:
                    type: string
                    format: date-time
                    example: "2024-01-02T12:00:00Z"

        WorkScheduleResponse: # This replaces the old "Work schedule" schema
            type: object
            properties:
                id:
                    type: integer
                    format: uint
                    example: 1
                name:
                    type: string
                    example: "Full WFO"
                work_type:
                    type: string
                    example: "WFO"
                details:
                    type: array
                    items:
                        $ref: "#/components/schemas/WorkScheduleDetailResponse"
                created_at:
                    type: string
                    format: date-time
                    example: "2024-01-01T12:00:00Z"
                updated_at:
                    type: string
                    format: date-time
                    example: "2024-01-02T12:00:00Z"

        CheckClockSettingsCreateRequest:
            type: object
            required:
                - employee_id
                - work_schedule_id
                - created_at
                - updated_at
            properties:
                employee_id:
                    type: integer
                    format: uint
                    description: The ID of the employee for whom the clock settings are being checked.
                    example: 40
                work_schedule_id:
                    type: integer
                    format: uint
                    description: The ID of the work schedule to check against.
                    example: 1
                created_at:
                    type: string
                    format: date-time
                    description: Timestamp of when the check clock setting was created.
                    example: "2024-01-01T12:00:00Z"
                updated_at:
                    type: string
                    format: date-time
                    description: Timestamp of when the check clock setting was last updated.
                    example: "2024-01-02T12:00:00Z"

        CheckClockSettingsResponse:
            type: object
            properties:
                id:
                    type: integer
                    format: uint
                    description: The unique identifier for the check clock setting.
                employee_id:
                    type: integer
                    format: uint
                    description: The ID of the employee.
                work_schedule_id:
                    type: integer
                    format: uint
                    description: The ID of the work schedule.
                created_at:
                    type: string
                    format: date-time
                    description: Timestamp of when the setting was created.
                updated_at:
                    type: string
                    format: date-time
                    description: Timestamp of when the setting was last updated

        # Subscription related schemas
        SubscriptionPlanResponse:
            type: object
            properties:
                id:
                    type: integer
                    format: uint
                    description: Unique identifier for the subscription plan
                    example: 1
                name:
                    type: string
                    description: Name of the subscription plan
                    example: "Standard Plan"
                type:
                    type: string
                    enum: [standard, premium, ultra]
                    description: Type of subscription plan
                    example: "standard"
                description:
                    type: string
                    description: Description of the subscription plan
                    example: "Best for small business"
                features:
                    type: array
                    items:
                        $ref: "#/components/schemas/SubscriptionFeatureResponse"
                    description: List of features included in this plan
                seat_plans:
                    type: array
                    items:
                        $ref: "#/components/schemas/SeatPlanResponse"
                    description: Available seat plans for this subscription
                is_active:
                    type: boolean
                    description: Whether the subscription plan is active
                    example: true
                created_at:
                    type: string
                    format: date-time
                    description: When the plan was created
                    example: "2024-01-01T00:00:00Z"

        SubscriptionFeatureResponse:
            type: object
            properties:
                id:
                    type: integer
                    format: uint
                    example: 1
                name:
                    type: string
                    example: "Employee Database"
                code:
                    type: string
                    example: "employee_database"
                description:
                    type: string
                    example: "Manage employee information"
                is_core:
                    type: boolean
                    example: true

        SeatPlanResponse:
            type: object
            properties:
                id:
                    type: integer
                    format: uint
                    example: 1
                name:
                    type: string
                    description: Size tier identifier
                    example: "std-tier1-50"
                min_employees:
                    type: integer
                    description: Minimum number of employees
                    example: 1
                max_employees:
                    type: integer
                    description: Maximum number of employees
                    example: 50
                price_per_month:
                    type: number
                    format: decimal
                    description: Monthly price in IDR
                    example: 99000
                price_per_year:
                    type: number
                    format: decimal
                    description: Yearly price in IDR
                    example: 990000
                is_active:
                    type: boolean
                    example: true
                created_at:
                    type: string
                    format: date-time
                    example: "2024-01-01T00:00:00Z"

        CheckoutSessionResponse:
            type: object
            properties:
                session_id:
                    type: string
                    description: Unique session identifier
                    example: "550e8400-e29b-41d4-a716-446655440000"
                status:
                    type: string
                    enum:
                        [
                            initiated,
                            pending,
                            completed,
                            failed,
                            cancelled,
                            expired,
                        ]
                    example: "initiated"
                is_trial_checkout:
                    type: boolean
                    description: Whether this is a trial checkout
                    example: true
                amount:
                    type: number
                    format: decimal
                    description: Checkout amount in IDR
                    example: 0
                currency:
                    type: string
                    example: "IDR"
                xendit_invoice_id:
                    type: string
                    nullable: true
                    description: Xendit invoice ID (for paid checkouts)
                    example: "inv_123456"
                xendit_invoice_url:
                    type: string
                    nullable: true
                    description: Xendit payment URL (for paid checkouts)
                    example: "https://checkout.xendit.co/web/123456"
                subscription_plan:
                    $ref: "#/components/schemas/SubscriptionPlanResponse"
                    nullable: true
                seat_plan:
                    $ref: "#/components/schemas/SeatPlanResponse"
                    nullable: true
                initiated_at:
                    type: string
                    format: date-time
                    example: "2024-01-01T00:00:00Z"
                expires_at:
                    type: string
                    format: date-time
                    nullable: true
                    example: "2024-01-02T00:00:00Z"
                completed_at:
                    type: string
                    format: date-time
                    nullable: true
                    example: "2024-01-01T01:00:00Z"

        SubscriptionResponse:
            type: object
            properties:
                id:
                    type: integer
                    format: uint
                    example: 1
                status:
                    type: string
                    enum:
                        [trial, active, inactive, suspended, expired, cancelled]
                    example: "trial"
                subscription_plan:
                    $ref: "#/components/schemas/SubscriptionPlanResponse"
                    nullable: true
                seat_plan:
                    $ref: "#/components/schemas/SeatPlanResponse"
                    nullable: true
                start_date:
                    type: string
                    format: date-time
                    example: "2024-01-01T00:00:00Z"
                end_date:
                    type: string
                    format: date-time
                    nullable: true
                    example: "2024-01-15T00:00:00Z"
                is_auto_renew:
                    type: boolean
                    example: true
                current_employee_count:
                    type: integer
                    example: 5
                max_employee_count:
                    type: integer
                    description: Maximum employees allowed based on seat plan
                    example: 50
                is_trial_used:
                    type: boolean
                    example: true
                is_in_trial:
                    type: boolean
                    example: true
                trial_start_date:
                    type: string
                    format: date-time
                    nullable: true
                    example: "2024-01-01T00:00:00Z"
                trial_end_date:
                    type: string
                    format: date-time
                    nullable: true
                    example: "2024-01-15T00:00:00Z"
                remaining_trial_days:
                    type: integer
                    nullable: true
                    description: Days remaining in trial period
                    example: 10
                created_at:
                    type: string
                    format: date-time
                    example: "2024-01-01T00:00:00Z"
                updated_at:
                    type: string
                    format: date-time
                    example: "2024-01-01T00:00:00Z"

        InvoiceResponse:
            type: object
            properties:
                id:
                    type: string
                    description: Xendit invoice ID
                    example: "inv_123456"
                invoice_url:
                    type: string
                    description: Payment URL
                    example: "https://checkout.xendit.co/web/123456"
                amount:
                    type: number
                    format: decimal
                    description: Invoice amount in IDR
                    example: 99000
                currency:
                    type: string
                    example: "IDR"
                expiry_date:
                    type: string
                    format: date-time
                    description: When the invoice expires
                    example: "2024-01-02T00:00:00Z"

        InitiatePaidCheckoutResponse:
            type: object
            properties:
                checkout_session:
                    $ref: "#/components/schemas/CheckoutSessionResponse"
                invoice:
                    $ref: "#/components/schemas/InvoiceResponse"

        # Request DTOs
        InitiateTrialCheckoutRequest:
            type: object
            required:
                - subscription_plan_id
                - seat_plan_id
            properties:
                subscription_plan_id:
                    type: integer
                    format: uint
                    description: ID of the subscription plan
                    example: 1
                seat_plan_id:
                    type: integer
                    format: uint
                    description: ID of the seat plan
                    example: 1

        InitiatePaidCheckoutRequest:
            type: object
            required:
                - subscription_plan_id
                - seat_plan_id
            properties:
                subscription_plan_id:
                    type: integer
                    format: uint
                    description: ID of the subscription plan
                    example: 1
                seat_plan_id:
                    type: integer
                    format: uint
                    description: ID of the seat plan
                    example: 1
                is_monthly:
                    type: boolean
                    description: Whether to use monthly pricing (true) or yearly (false)
                    example: true
                    default: true

        CompleteTrialCheckoutRequest:
            type: object
            required:
                - session_id
                - company_name
                - company_address
                - company_phone
                - company_email
            properties:
                session_id:
                    type: string
                    description: Checkout session ID
                    example: "550e8400-e29b-41d4-a716-446655440000"
                company_name:
                    type: string
                    description: Name of the company
                    example: "PT. Example Company"
                company_address:
                    type: string
                    description: Company address
                    example: "Jl. Sudirman No. 1, Jakarta"
                company_phone:
                    type: string
                    description: Company phone number
                    example: "+6281234567890"
                company_email:
                    type: string
                    format: email
                    description: Company email address
                    example: "company@example.com"
                tax_number:
                    type: string
                    description: Company tax number (optional)
                    example: "01.234.567.8-901.000"
                bank_name:
                    type: string
                    description: Bank name for payments (optional)
                    example: "Bank Central Asia"
                bank_account_number:
                    type: string
                    description: Bank account number (optional)
                    example: "1234567890"
                bank_account_name:
                    type: string
                    description: Bank account holder name (optional)
                    example: "PT. Example Company"
        Document:
            type: object
            description: Represents a document in the system.
            properties:
                id:
                    type: integer
                    format: uint
                    description: Unique identifier for the document.
                    readOnly: true
                    example: 1
                employee_id:
                    type: integer
                    format: uint
                    description: Foreign key referencing the associated Employee ID.
                    example: 1
                name:
                    type: string
                    maxLength: 255
                    description: The filename of the document.
                    example: "John_Doe_Documents_123456789012345.pdf"
                url:
                    type: string
                    maxLength: 255
                    format: url
                    description: URL to access the document.
                    example: "https://your-project.supabase.co/storage/v1/object/public/document/John_Doe_Documents_123456789012345.pdf"
                created_at:
                    type: string
                    format: date-time
                    description: Timestamp when the document was created.
                    readOnly: true
                    example: "2024-01-15T10:30:00Z"
                updated_at:
                    type: string
                    format: date-time
                    description: Timestamp when the document was last updated.
                    readOnly: true
                    example: "2024-01-15T10:30:00Z"
            required:
                - employee_id
                - name
                - url
                - created_at
                - updated_at

        EmployeeStatisticsResponse:
            type: object
            properties:
                total_employees:
                    type: integer
                    format: int64
                    description: Total number of employees in the system
                    example: 150
                new_employees:
                    type: integer
                    format: int64
                    description: Number of new employees hired in the current month
                    example: 12
                active_employees:
                    type: integer
                    format: int64
                    description: Number of currently active employees
                    example: 145
                resigned_employees:
                    type: integer
                    format: int64
                    description: Number of employees who have resigned
                    example: 5
                permanent_employees:
                    type: integer
                    format: int64
                    description: Number of employees with permanent contract type
                    example: 85
                contract_employees:
                    type: integer
                    format: int64
                    description: Number of employees with contract type
                    example: 45
                freelance_employees:
                    type: integer
                    format: int64
                    description: Number of employees with freelance contract type
                    example: 20
                total_employees_trend:
                    type: number
                    format: float
                    description: Percentage change in total employees compared to employees hired before current month
                    example: 8.5
                new_employees_trend:
                    type: number
                    format: float
                    description: Percentage change in new employees compared to previous 30 days
                    example: 15.2
                active_employees_trend:
                    type: number
                    format: float
                    description: Percentage change in active employees compared to previous month
                    example: 5.8
            required:
                - total_employees
                - new_employees
                - active_employees
                - resigned_employees
                - permanent_employees
                - contract_employees
                - freelance_employees

paths:
    /auth/login:
        post:
            tags: [Authentication]
            summary: User login
            security: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - identifier
                                - password
                            properties:
                                identifier:
                                    type: string
                                    description: "User's email address, phone number, or employee code"
                                    example: "john.doe@example.com | +1234567890 | E12345"
                                password:
                                    type: string
                                    format: password
                                    example: "securepassword123"
            responses:
                200:
                    description: Login successful
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 200
                                    message:
                                        type: string
                                        example: "Login successful"
                                    data:
                                        type: object
                                        properties:
                                            access_token:
                                                type: string
                                                example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                                            user:
                                                $ref: "#/components/schemas/User"

                400:
                    description: Bad request
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 400
                                    message:
                                        type: string
                                        example: "Invalid request"
                                    error:
                                        type: string
                                        example: "Email and password are required"
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 401
                                    message:
                                        type: string
                                        example: "Unauthorized"
                                    error:
                                        type: string
                                        example: "Invalid email or password"
                500:
                    description: Internal server error
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 500
                                    message:
                                        type: string
                                        example: "Internal server error"
                                    error:
                                        type: string
                                        example: "Failed to process login request"

    /auth/register:
        post:
            tags: [Authentication]
            summary: User registration
            description: Register a new user account
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - first_name
                                - email
                                - password
                            properties:
                                first_name:
                                    type: string
                                    example: "John"
                                last_name:
                                    type: string
                                    example: "Doe"
                                email:
                                    type: string
                                    format: email
                                    example: "john.doe@example.com"
                                password:
                                    type: string
                                    format: password
                                    example: "securepassword123"
                                agree_terms:
                                    type: boolean
                                    example: true
            responses:
                201:
                    description: User registered successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 201
                                    message:
                                        type: string
                                        example: "User registered successfully"
                                    data:
                                        type: object
                                        properties:
                                            user_id:
                                                type: integer
                                                example: 1
                400:
                    description: Bad request
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 400
                                    message:
                                        type: string
                                        example: "Invalid request"
                                    error:
                                        type: string
                                        example: "Email already in use"
                500:
                    description: Internal server error
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 500
                                    message:
                                        type: string
                                        example: "Internal server error"
                                    error:
                                        type: string
                                        example: "Failed to create user"

    /auth/logout:
        post:
            tags: [Authentication]
            summary: User logout
            description: Log out the currently authenticated user by invalidating the access token.
            security:
                - bearerAuth: []
            responses:
                200:
                    description: Logout successful
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 200
                                    message:
                                        type: string
                                        example: "Successfully logged out"
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 401
                                    message:
                                        type: string
                                        example: "Unauthorized"
                                    error:
                                        type: string
                                        example: "Token is missing or invalid"
                500:
                    description: Internal server error
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 500
                                    message:
                                        type: string
                                        example: "Internal server error"
                                    error:
                                        type: string
                                        example: "Failed to process logout request"

    /auth/google:
        post:
            tags: [Authentication]
            summary: Google Sign-In / Registration
            description: Authenticates a user using a Google ID Token. If the user doesn't exist, attempts registration (requires agreeing to terms if applicable).
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - token
                            properties:
                                token:
                                    type: string
                                    example: "eyJhbGciOiJSUzI1NiIsImtpZCI6Ij..."
                                    description: The Google ID Token received from the client-side Google Sign-In flow.
            responses:
                "200":
                    description: Google login successful
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 200
                                    message:
                                        type: string
                                        example: "Google login successful"
                                    data:
                                        type: object
                                        properties:
                                            access_token:
                                                type: string
                                                example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                                            user:
                                                type: object
                                                properties:
                                                    id:
                                                        type: integer
                                                        example: 1
                                                    email:
                                                        type: string
                                                        example: "john.doe@example.com"
                                                    role:
                                                        type: string
                                                        example: "employee"

                "201":
                    description: Google registration successful (user didn't exist previously)
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 201
                                    message:
                                        type: string
                                        example: "Google registration successful"
                                    data:
                                        type: object
                                        properties:
                                            token:
                                                type: string
                                                example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                                            user:
                                                $ref: "#/components/schemas/User"
                "400":
                    description: Bad Request (e.g., missing token, invalid token format, terms not agreed for registration)
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 400
                                    message:
                                        type: string
                                        example: "Bad Request"
                "401":
                    description: Unauthorized (e.g., invalid Google token signature/audience/issuer)
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 401
                                    message:
                                        type: string
                                        example: "Unauthorized"
                "500":
                    description: Internal Server Error
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 500
                                    message:
                                        type: string
                                        example: "Internal Server Error"

    /auth/password/change:
        post:
            tags: [Authentication]
            summary: Change Password
            description: Allows an authenticated user to change their password.
            security:
                - bearerAuth: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - old_password
                                - new_password
                            properties:
                                old_password:
                                    type: string
                                    format: password
                                    example: "oldpassword123"
                                new_password:
                                    type: string
                                    format: password
                                    example: "newpassword123"
            responses:
                "200":
                    description: Password changed successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 200
                                    message:
                                        type: string
                                        example: "Password changed successfully"
                "400":
                    description: Bad Request (e.g., missing fields, new password doesn't meet requirements)
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 400
                                    message:
                                        type: string
                                        example: "Bad Request"
                "401":
                    description: Unauthorized (e.g., invalid/expired JWT, incorrect old password)
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 401
                                    message:
                                        type: string
                                        example: "Unauthorized"
                "500":
                    description: Internal Server Error
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 500
                                    message:
                                        type: string
                                        example: "Internal Server Error"

    /auth/password/reset:
        post:
            tags: [Authentication]
            summary: Request Password Reset
            description: Initiates the password reset process for a given email address. A reset link/code will typically be sent to the user's email.
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - email
                            properties:
                                email:
                                    type: string
                                    format: email
                                    example: "john.doe@example.com"
            responses:
                "200":
                    description: Password reset initiated (if account exists)
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 200
                                    message:
                                        type: string
                                        example: "If an account with that email exists, a password reset link has been sent."

                "400":
                    description: Bad Request (e.g., invalid email format)
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 400
                                    message:
                                        type: string
                                        example: "Bad Request"
                "500":
                    description: Internal Server Error
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 500
                                    message:
                                        type: string
                                        example: "Internal Server Error"

    /api/employee:
        get:
            tags: [Employees]
            summary: Get all employees
            description: Retrieve a paginated list of employees. Filters can be applied via query parameters.
            parameters:
                - in: query
                  name: page
                  schema:
                      type: integer
                      minimum: 1
                      default: 1
                  description: Page number for pagination.
                - in: query
                  name: page_size
                  schema:
                      type: integer
                      minimum: 1
                      maximum: 100
                      default: 10
                  description: Number of items per page.
            responses:
                "200":
                    description: A list of employees retrieved successfully.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 200
                                    message:
                                        type: string
                                        example: "Employees retrieved successfully"
                                    data:
                                        type: object
                                        properties:
                                            items:
                                                type: array
                                                items:
                                                    type: object
                                                    properties:
                                                        id:
                                                            type: integer
                                                            format: uint
                                                            example: 1
                                                        first_name:
                                                            type: string
                                                            example: "John"
                                                        last_name:
                                                            type: string
                                                            nullable: true
                                                            example: "Doe"
                                                        gender:
                                                            type: string
                                                            nullable: true
                                                            enum: [Male, Female]
                                                            example: "Male"
                                                        phone:
                                                            type: string
                                                            nullable: true
                                                            example: "+6281234567890"
                                                        branch_id:
                                                            type: integer
                                                            format: uint
                                                            nullable: true
                                                            example: 1
                                                        position_id:
                                                            type: integer
                                                            format: uint
                                                            example: 1
                                                        grade:
                                                            type: string
                                                            nullable: true
                                                            example: "Staff"
                                                        employment_status:
                                                            type: boolean
                                                            example: true
                                                        employee_code:
                                                            type: string
                                                            nullable: true
                                                            example: "EMP001"
                                                        date_of_birth:
                                                            type: string
                                                            format: date
                                                            nullable: true
                                                            example: "1990-05-15"
                                            pagination:
                                                type: object
                                                properties:
                                                    total_items:
                                                        type: integer
                                                        format: int64
                                                        example: 100
                                                    total_pages:
                                                        type: integer
                                                        example: 10
                                                    current_page:
                                                        type: integer
                                                        example: 1
                                                    page_size:
                                                        type: integer
                                                        example: 10
                                                    has_next_page:
                                                        type: boolean
                                                        example: true
                                                    has_prev_page:
                                                        type: boolean
                                                        example: false
                "500":
                    description: Internal server error
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 500
                                    message:
                                        type: string
                                        example: "Internal server error"
                                    error:
                                        type: string
                                        example: "Failed to retrieve employees list"
        post:
            tags: [Employees]
            summary: Create new employee
            description: Create a new employee with optional profile photo upload. All employee data and photo can be submitted in a single request using multipart/form-data.
            requestBody:
                required: true
                content:
                    multipart/form-data:
                        schema:
                            type: object
                            required:
                                - email
                                - first_name
                                - position_id
                            properties:
                                email:
                                    type: string
                                    format: email
                                    example: "john.doe@example.com"
                                password:
                                    type: string
                                    format: password
                                    minLength: 8
                                    example: "password123"
                                phone:
                                    type: string
                                    example: "+1234567890"
                                first_name:
                                    type: string
                                    maxLength: 255
                                    example: "John"
                                last_name:
                                    type: string
                                    maxLength: 255
                                    nullable: true
                                    example: "Doe"
                                position_id:
                                    type: integer
                                    format: uint
                                    example: 1
                                employee_code:
                                    type: string
                                    maxLength: 50
                                    example: "EMP001"
                                branch_id:
                                    type: integer
                                    format: uint
                                    example: 1
                                gender:
                                    type: string
                                    enum: [male, female]
                                    example: "male"
                                nik:
                                    type: string
                                    pattern: "^[0-9]*$"
                                    maxLength: 16
                                    example: "1234567890123456"
                                place_of_birth:
                                    type: string
                                    maxLength: 255
                                    nullable: true
                                    description: "Place where the employee was born (optional)."
                                    example: "Jakarta"
                                date_of_birth:
                                    type: string
                                    format: date
                                    nullable: true
                                    description: "Date when the employee was born (optional)."
                                    example: "1990-05-15"
                                last_education:
                                    type: string
                                    nullable: true
                                    enum:
                                        [
                                            SD,
                                            SMP,
                                            SMA/SMK,
                                            D1,
                                            D2,
                                            D3,
                                            S1/D4,
                                            S2,
                                            S3,
                                            Other,
                                        ]
                                    description: "Employee's highest level of education (optional)."
                                    example: "SMA/SMK"
                                grade:
                                    type: string
                                    maxLength: 50
                                    nullable: true
                                    description: "Employee's job grade or level (optional)."
                                    example: "Senior Staff"
                                contract_type:
                                    type: string
                                    nullable: true
                                    enum: [permanent, contract, freelance]
                                    example: "permanent"
                                hire_date:
                                    type: string
                                    format: date
                                    nullable: true
                                    description: "Date the employee was hired (optional)."
                                    example: "2024-01-15"
                                bank_name:
                                    type: string
                                    maxLength: 100
                                    nullable: true
                                    description: "Name of the employee's bank (optional)."
                                    example: "Bank Central Asia"
                                bank_account_number:
                                    type: string
                                    maxLength: 100
                                    nullable: true
                                    description: "Employee's bank account number (optional)."
                                    example: "1234567890"
                                bank_account_holder_name:
                                    type: string
                                    maxLength: 255
                                    nullable: true
                                    description: "Name on the employee's bank account (optional)."
                                    example: "John Doe"
                                tax_status:
                                    type: string
                                    nullable: true
                                    enum:
                                        [
                                            TK/0,
                                            TK/1,
                                            TK/2,
                                            TK/3,
                                            K/0,
                                            K/1,
                                            K/2,
                                            K/3,
                                            K/I/0,
                                            K/I/1,
                                            K/I/2,
                                            K/I/3,
                                        ]
                                    description: "Employee's tax status (optional)."
                                    example: "K/0"
                                profile_photo_url:
                                    type: string
                                    format: url
                                    nullable: true
                                    description: "URL to the employee's profile photo (optional)."
                                    example: "https://example.com/profile.jpg"
                                photo_file:
                                    type: string
                                    format: binary
                                    description: "Profile photo file to upload (JPEG, PNG, GIF, WebP only). Alternative to profile_photo_url."
            responses:
                "201":
                    description: Employee created successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 201
                                    message:
                                        type: string
                                        example: "Employee created successfully"
                                    data:
                                        type: object
                                        properties:
                                            id:
                                                type: integer
                                                format: uint
                                                example: 1
                                            user_id:
                                                type: integer
                                                format: uint
                                                description: "ID of the associated user account."
                                                example: 123
                                            first_name:
                                                type: string
                                                example: "John"
                                            last_name:
                                                type: string
                                                nullable: true
                                                example: "Doe"
                                            gender:
                                                type: string
                                                nullable: true
                                                enum: [Male, Female]
                                                example: "Male"
                                            phone:
                                                type: string
                                                nullable: true
                                                example: "+6281234567890"
                                            branch_id:
                                                type: integer
                                                format: uint
                                                nullable: true
                                                example: 1
                                            position_id:
                                                type: integer
                                                format: uint
                                                example: 1
                                            grade:
                                                type: string
                                                nullable: true
                                                example: "Senior Staff"
                                            employment_status:
                                                type: boolean
                                                example: true
                                            employee_code:
                                                type: string
                                                nullable: true
                                                example: "EMP001"
                                            nik:
                                                type: string
                                                nullable: true
                                                maxLength: 16
                                                example: "1234567890123456"
                                            place_of_birth:
                                                type: string
                                                maxLength: 255
                                                nullable: true
                                                example: "Jakarta"
                                            date_of_birth:
                                                type: string
                                                format: date
                                                nullable: true
                                                example: "1990-05-15"
                                            last_education:
                                                type: string
                                                nullable: true
                                                enum:
                                                    [
                                                        SD,
                                                        SMP,
                                                        SMA/SMK,
                                                        D1,
                                                        D2,
                                                        D3,
                                                        S1/D4,
                                                        S2,
                                                        S3,
                                                        Other,
                                                    ]
                                                example: "SMA/SMK"
                                            contract_type:
                                                type: string
                                                nullable: true
                                                enum:
                                                    [
                                                        permanent,
                                                        contract,
                                                        freelance,
                                                    ]
                                                example: "permanent"
                                            hire_date:
                                                type: string
                                                format: date
                                                nullable: true
                                                example: "2024-01-15"
                                            bank_name:
                                                type: string
                                                maxLength: 100
                                                nullable: true
                                                example: "Bank Central Asia"
                                            bank_account_number:
                                                type: string
                                                maxLength: 100
                                                nullable: true
                                                example: "1234567890"
                                            bank_account_holder_name:
                                                type: string
                                                maxLength: 255
                                                nullable: true
                                                example: "John Doe"
                                            tax_status:
                                                type: string
                                                nullable: true
                                                enum:
                                                    [
                                                        TK/0,
                                                        TK/1,
                                                        TK/2,
                                                        TK/3,
                                                        K/0,
                                                        K/1,
                                                        K/2,
                                                        K/3,
                                                        K/I/0,
                                                        K/I/1,
                                                        K/I/2,
                                                        K/I/3,
                                                    ]
                                                example: "K/0"
                                            profile_photo_url:
                                                type: string
                                                maxLength: 255
                                                format: url
                                                nullable: true
                                                example: "https://example.com/profile.jpg"
                                            created_at:
                                                type: string
                                                format: date-time
                                                readOnly: true
                                            updated_at:
                                                type: string
                                                format: date-time
                                                readOnly: true
                                            email:
                                                type: string
                                                format: email
                                                nullable: true
                                                description: "Updated email of the associated user account, if changed."
                                                example: "new.employee.email@example.com"
                "400":
                    description: Bad request
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 400
                                    message:
                                        type: string
                                        example: "Invalid request data. Please check your input."
                                    error:
                                        type: string
                                        example: "Missing required fields"
                "500":
                    description: Internal server error
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 500
                                    message:
                                        type: string
                                        example: "Internal server error"
                                    error:
                                        type: string
                                        example: "failed to create employee: ..."

    /api/employee/{id}:
        get:
            tags: [Employees]
            summary: Get employee by ID
            description: Retrieve a specific employee by their unique ID.
            security:
                - bearerAuth: []
            parameters:
                - in: path
                  name: id
                  required: true
                  description: Numeric ID of the employee to get.
                  schema:
                      type: integer
                      format: uint
                      example: 1
            responses:
                "200":
                    description: Employee retrieved successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 200
                                    message:
                                        type: string
                                        example: "Employee retrieved successfully"
                                    data:
                                        type: object
                                        properties:
                                            id:
                                                type: integer
                                                format: uint
                                                example: 1
                                            first_name:
                                                type: string
                                                example: "John"
                                            last_name:
                                                type: string
                                                nullable: true
                                                example: "Doe"
                                            gender:
                                                type: string
                                                nullable: true
                                                enum: [Male, Female]
                                                example: "Male"
                                            phone:
                                                type: string
                                                nullable: true
                                                example: "+6281234567890"
                                            branch_id:
                                                type: integer
                                                format: uint
                                                nullable: true
                                                example: 1
                                            position_id:
                                                type: integer
                                                format: uint
                                                example: 1
                                            grade:
                                                type: string
                                                nullable: true
                                                example: "Senior Staff"
                                            employment_status:
                                                type: boolean
                                                example: true
                                            resignation_date:
                                                type: string
                                                format: date
                                                nullable: true
                                                example: "2024-03-15"
                                            hire_date:
                                                type: string
                                                format: date
                                                nullable: true
                                                example: "2024-01-15"
                                            bank_name:
                                                type: string
                                                nullable: true
                                                example: "Bank Mandiri"
                                            bank_account_number:
                                                type: string
                                                nullable: true
                                                example: "1234567890"
                                            bank_account_holder_name:
                                                type: string
                                                nullable: true
                                                example: "John Doe"
                                            tax_status:
                                                type: string
                                                nullable: true
                                                example: "K/0"
                                            profile_photo_url:
                                                type: string
                                                nullable: true
                                                format: url
                                                example: "https://example.com/profile.jpg"
                                            created_at:
                                                type: string
                                                format: date-time
                                                readOnly: true
                                            updated_at:
                                                type: string
                                                format: date-time
                                                readOnly: true
                                            place_of_birth:
                                                type: string
                                                maxLength: 255
                                                nullable: true
                                                example: "Jakarta"
                                            date_of_birth:
                                                type: string
                                                format: date
                                                nullable: true
                                                example: "1990-05-15"
                                            last_education:
                                                type: string
                                                nullable: true
                                                enum:
                                                    [
                                                        SD,
                                                        SMP,
                                                        SMA/SMK,
                                                        D1,
                                                        D2,
                                                        D3,
                                                        S1/D4,
                                                        S2,
                                                        S3,
                                                        Other,
                                                    ]
                                                example: "SMA/SMK"

                "400":
                    description: Invalid ID supplied
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 400
                                    message:
                                        type: string
                                        example: "Invalid employee ID format"
                                    error:
                                        type: string
                                        example: 'strconv.ParseUint: parsing "abc": invalid syntax'
                "404":
                    description: Employee not found
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 404
                                    message:
                                        type: string
                                        example: "Employee not found"
                                    error:
                                        type: string
                                        example: "Employee not found"
                "500":
                    description: Internal server error
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 500
                                    message:
                                        type: string
                                        example: "Internal server error"
                                    error:
                                        type: string
                                        example: "failed to retrieve employee"

        patch:
            tags: [Employees]
            summary: Update employee details
            description: Update employee details with optional profile photo upload. All employee data and photo can be submitted in a single request using multipart/form-data.
            security:
                - bearerAuth: []
            parameters:
                - in: path
                  name: id
                  required: true
                  description: Numeric ID of the employee to update.
                  schema:
                      type: integer
                      format: uint
                      example: 1
            requestBody:
                required: true
                content:
                    multipart/form-data:
                        schema:
                            type: object
                            properties:
                                first_name:
                                    type: string
                                    maxLength: 255
                                    nullable: true
                                    example: "John"
                                last_name:
                                    type: string
                                    maxLength: 255
                                    nullable: true
                                    example: "Doe"
                                employee_code:
                                    type: string
                                    maxLength: 255
                                    nullable: true
                                    example: "EMP001"
                                branch_id:
                                    type: integer
                                    format: uint
                                    nullable: true
                                    example: 2
                                position_id:
                                    type: integer
                                    format: uint
                                    nullable: true
                                    example: 2
                                gender:
                                    type: string
                                    nullable: true
                                    enum: [Male, Female]
                                    example: "Female"
                                nik:
                                    type: string
                                    maxLength: 16
                                    nullable: true
                                    example: "9876543210987654"
                                place_of_birth:
                                    type: string
                                    maxLength: 255
                                    nullable: true
                                    example: "Jakarta"
                                date_of_birth:
                                    type: string
                                    format: date
                                    nullable: true
                                    example: "1990-05-15"
                                last_education:
                                    type: string
                                    nullable: true
                                    enum:
                                        [
                                            SD,
                                            SMP,
                                            SMA/SMK,
                                            D1,
                                            D2,
                                            D3,
                                            S1/D4,
                                            S2,
                                            S3,
                                            Other,
                                        ]
                                    example: "SMA/SMK"
                                grade:
                                    type: string
                                    maxLength: 50
                                    nullable: true
                                    example: "Manager"
                                contract_type:
                                    type: string
                                    nullable: true
                                    enum: [permanent, contract, freelance]
                                    example: "permanent"
                                resignation_date:
                                    type: string
                                    format: date
                                    nullable: true
                                    example: "2025-12-31"
                                hire_date:
                                    type: string
                                    format: date
                                    nullable: true
                                    example: "2022-06-01"
                                bank_name:
                                    type: string
                                    maxLength: 100
                                    nullable: true
                                    example: "Bank Mandiri"
                                bank_account_number:
                                    type: string
                                    maxLength: 100
                                    nullable: true
                                    example: "0987654321"
                                bank_account_holder_name:
                                    type: string
                                    maxLength: 255
                                    nullable: true
                                    example: "Jane Doe"
                                tax_status:
                                    type: string
                                    nullable: true
                                    enum:
                                        [
                                            TK/0,
                                            TK/1,
                                            TK/2,
                                            TK/3,
                                            K/0,
                                            K/1,
                                            K/2,
                                            K/3,
                                            K/I/0,
                                            K/I/1,
                                            K/I/2,
                                            K/I/3,
                                        ]
                                    example: "TK/0"
                                profile_photo_url:
                                    type: string
                                    maxLength: 255
                                    format: url
                                    nullable: true
                                    description: "URL to the employee's profile photo (optional)."
                                    example: "https://example.com/new_profile.jpg"
                                photo_file:
                                    type: string
                                    format: binary
                                    description: "Profile photo file to upload (JPEG, PNG, GIF, WebP only). Alternative to profile_photo_url."
                                employment_status:
                                    type: boolean
                                    example: true
                                email:
                                    type: string
                                    format: email
                                    nullable: true
                                    description: "User's new email address (optional). If provided, will attempt to update the associated user account's email."
                                    example: "new.employee.email@example.com"
                                phone:
                                    type: string
                                    pattern: '^\+?[1-9]\d{1,14}$'
                                    nullable: true
                                    description: "User's new phone number (optional, E.164 format). If provided, will attempt to update the associated user account's phone."
                                    example: "+628123450001"
            responses:
                "200":
                    description: Employee updated successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 200
                                    message:
                                        type: string
                                        example: "Employee updated successfully"
                                    data:
                                        type: object
                                        properties:
                                            id:
                                                type: integer
                                                format: uint
                                                example: 1
                                            first_name:
                                                type: string
                                                example: "John"
                                            last_name:
                                                type: string
                                                nullable: true
                                                example: "Doe"
                                            gender:
                                                type: string
                                                nullable: true
                                                enum: [Male, Female]
                                                example: "Male"
                                            phone:
                                                type: string
                                                nullable: true
                                                example: "+6281234567890"
                                            branch_id:
                                                type: integer
                                                format: uint
                                                nullable: true
                                                example: 1
                                            position_id:
                                                type: integer
                                                format: uint
                                                example: 1
                                            grade:
                                                type: string
                                                nullable: true
                                                example: "Senior Staff"
                                            employment_status:
                                                type: boolean
                                                example: true
                                            nik:
                                                type: string
                                                nullable: true
                                                example: "9876543210987654"
                                            place_of_birth:
                                                type: string
                                                nullable: true
                                                example: "Jakarta"
                                            date_of_birth:
                                                type: string
                                                format: date
                                                nullable: true
                                                example: "1990-05-15"
                                            email:
                                                type: string
                                                format: email
                                                nullable: true
                                                description: "Updated email of the associated user account, if changed."
                                                example: "new.employee.email@example.com"
                                            resignation_date:
                                                type: string
                                                format: date
                                                nullable: true
                                                example: "2024-03-15"
                                            hire_date:
                                                type: string
                                                format: date
                                                nullable: true
                                                example: "2024-01-15"
                                            bank_name:
                                                type: string
                                                nullable: true
                                                example: "Bank Mandiri"
                                            bank_account_number:
                                                type: string
                                                nullable: true
                                                example: "1234567890"
                                            bank_account_holder_name:
                                                type: string
                                                nullable: true
                                                example: "John Doe"
                                            tax_status:
                                                type: string
                                                nullable: true
                                                example: "K/0"
                                            profile_photo_url:
                                                type: string
                                                nullable: true
                                                format: url
                                                example: "https://example.com/new_profile.jpg"
                                            created_at:
                                                type: string
                                                format: date-time
                                                example: "2024-03-15T10:30:00Z"
                                            updated_at:
                                                type: string
                                                format: date-time
                                                example: "2024-03-15T10:30:00Z"

                400:
                    description: Bad request
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 400
                                    message:
                                        type: string
                                        example: "Invalid request"
                                    error:
                                        type: string
                                        example: "Invalid data provided"
                404:
                    description: Employee not found
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 404
                                    message:
                                        type: string
                                        example: "Not found"
                                    error:
                                        type: string
                                        example: "Employee not found"
                500:
                    description: Internal server error
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 500
                                    message:
                                        type: string
                                        example: "Internal server error"
                                    error:
                                        type: string
                                        example: "Failed to update employee"

    /api/employee/{id}/status:
        patch:
            tags: [Employees]
            summary: Update employee employment status
            description: Update employee's employment status to inactive and set resignation date to current date
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                      type: integer
            responses:
                200:
                    description: Employee status updated successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 200
                                    message:
                                        type: string
                                        example: "Employee status updated successfully"
                                    data:
                                        type: object
                                        properties:
                                            id:
                                                type: integer
                                                example: 1
                                            employee_code:
                                                type: string
                                                example: "EMP001"
                                            first_name:
                                                type: string
                                                example: "John"
                                            last_name:
                                                type: string
                                                example: "Doe"
                                            employment_status:
                                                type: string
                                                example: "inactive"
                                            resignation_date:
                                                type: string
                                                format: date
                                                example: "2024-03-15"
                404:
                    description: Employee not found
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 404
                                    message:
                                        type: string
                                        example: "Not found"
                                    error:
                                        type: string
                                        example: "Employee not found"
                500:
                    description: Internal server error
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 500
                                    message:
                                        type: string
                                        example: "Internal server error"
                                    error:
                                        type: string
                                        example: "Failed to update employee status"

    /api/employee/statistics:
        get:
            tags: [Employees]
            summary: Get employee statistics
            description: Retrieve statistical information about employees including total count, new hires, active and resigned employees
            security:
                - bearerAuth: []
            responses:
                200:
                    description: Employee statistics retrieved successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 200
                                    message:
                                        type: string
                                        example: "Employee statistics retrieved successfully"
                                    data:
                                        $ref: "#/components/schemas/EmployeeStatisticsResponse"
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 401
                                    message:
                                        type: string
                                        example: "Unauthorized"
                                    error:
                                        type: string
                                        example: "Invalid or missing authentication token"
                500:
                    description: Internal server error
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 500
                                    message:
                                        type: string
                                        example: "Internal server error"
                                    error:
                                        type: string
                                        example: "Failed to retrieve employee statistics"                                    

    /api/checkclock-settings:
        post:
            tags: [Check Clock Settings]
            summary: Create a new check clock setting
            description: Adds a new check clock setting or assign a work schedule to an employee.
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/CheckClockSettingsCreateRequest"
            responses:
                201:
                    description: Check clock setting created successfully
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/CheckClockSettingsResponse"
                400:
                    description: Invalid request payload or validation error
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 400
                                    message:
                                        type: string
                                        example: "Invalid request payload"
                                    error:
                                        type: string
                                        example: "Missing required fields or invalid data"
                500:
                    description: Internal server error
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 500
                                    message:
                                        type: string
                                        example: "Internal server error"
                                    error:
                                        type: string
                                        example: "Failed to create check clock setting"

    /employee-documents:
        post:
            tags: [Employee Documents]
            summary: Upload a new employee document
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - employee_id
                                - title
                                - document_url
                            properties:
                                employee_id:
                                    type: integer
                                    example: 1
                                title:
                                    type: string
                                    example: "Employment Contract"
                                document_url:
                                    type: string
                                    example: "https://storage.example.com/documents/contract.pdf"
                                status:
                                    type: string
                                    enum: [draft, active]
                                    example: "draft"
            responses:
                201:
                    description: Document uploaded successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 201
                                    message:
                                        type: string
                                        example: "Document uploaded successfully"
                                    data:
                                        type: object
                                        properties:
                                            id:
                                                type: integer
                                                example: 1
                                            employee_id:
                                                type: integer
                                                example: 1
                                            title:
                                                type: string
                                                example: "Employment Contract"
                                            document_url:
                                                type: string
                                                example: "https://storage.example.com/documents/contract.pdf"
                                            created_at:
                                                type: string
                                                format: date-time
                                                example: "2024-03-15T10:30:00Z"
                400:
                    description: Bad request
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 400
                                    message:
                                        type: string
                                        example: "Invalid request"
                                    error:
                                        type: string
                                        example: "Missing required fields"
                500:
                    description: Internal server error
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 500
                                    message:
                                        type: string
                                        example: "Internal server error"
                                    error:
                                        type: string
                                        example: "Failed to upload document"

        get:
            tags: [Employee Documents]
            summary: Get all employee documents
            parameters:
                - in: query
                  name: employee_id
                  schema:
                      type: integer
            responses:
                200:
                    description: List of employee documents retrieved successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 200
                                    message:
                                        type: string
                                        example: "Documents retrieved successfully"
                                    data:
                                        type: array
                                        items:
                                            type: object
                                            properties:
                                                id:
                                                    type: integer
                                                    example: 1
                                                employee_id:
                                                    type: integer
                                                    example: 1
                                                title:
                                                    type: string
                                                    example: "Employment Contract"
                                                document_url:
                                                    type: string
                                                    example: "https://storage.example.com/documents/contract.pdf"
                                                created_at:
                                                    type: string
                                                    format: date-time
                                                    example: "2024-03-15T10:30:00Z"
                500:
                    description: Internal server error
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 500
                                    message:
                                        type: string
                                        example: "Internal server error"
                                    error:
                                        type: string
                                        example: "Failed to retrieve documents"

    /employee-documents/{id}:
        get:
            tags: [Employee Documents]
            summary: Get a specific employee document by ID
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                      type: integer
            responses:
                200:
                    description: Document details retrieved successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 200
                                    message:
                                        type: string
                                        example: "Document retrieved successfully"
                                    data:
                                        type: object
                                        properties:
                                            id:
                                                type: integer
                                                example: 1
                                            employee_id:
                                                type: integer
                                                example: 1
                                            title:
                                                type: string
                                                example: "Employment Contract"
                                            document_url:
                                                type: string
                                                example: "https://storage.example.com/documents/contract.pdf"
                                            created_at:
                                                type: string
                                                format: date-time
                                                example: "2024-03-15T10:30:00Z"
                404:
                    description: Document not found
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 404
                                    message:
                                        type: string
                                        example: "Not found"
                                    error:
                                        type: string
                                        example: "Document not found"
                500:
                    description: Internal server error
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 500
                                    message:
                                        type: string
                                        example: "Internal server error"
                                    error:
                                        type: string
                                        example: "Failed to retrieve document"

        patch:
            tags: [Employee Documents]
            summary: Update document details
            description: Update document title or URL
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                      type: integer
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                title:
                                    type: string
                                    example: "Updated Contract"
                                document_url:
                                    type: string
                                    example: "https://storage.example.com/documents/contract_v2.pdf"
            responses:
                200:
                    description: Document updated successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 200
                                    message:
                                        type: string
                                        example: "Document updated successfully"
                                    data:
                                        type: object
                                        properties:
                                            id:
                                                type: integer
                                                example: 1
                                            employee_id:
                                                type: integer
                                                example: 1
                                            title:
                                                type: string
                                                example: "Updated Contract"
                                            document_url:
                                                type: string
                                                example: "https://storage.example.com/documents/contract_v2.pdf"
                                            created_at:
                                                type: string
                                                format: date-time
                                                example: "2024-03-15T10:30:00Z"
                404:
                    description: Document not found
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 404
                                    message:
                                        type: string
                                        example: "Not found"
                                    error:
                                        type: string
                                        example: "Document not found"
                500:
                    description: Internal server error
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 500
                                    message:
                                        type: string
                                        example: "Internal server error"
                                    error:
                                        type: string
                                        example: "Failed to update document"

        delete:
            tags: [Employee Documents]
            summary: Delete document
            description: Permanently delete a document
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                      type: integer
            responses:
                200:
                    description: Document deleted successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 200
                                    message:
                                        type: string
                                        example: "Document deleted successfully"
                404:
                    description: Document not found
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 404
                                    message:
                                        type: string
                                        example: "Not found"
                                    error:
                                        type: string
                                        example: "Document not found"
                500:
                    description: Internal server error
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 500
                                    message:
                                        type: string
                                        example: "Internal server error"
                                    error:
                                        type: string
                                        example: "Failed to delete document"

    #    /attendance/check-in:
    #        post:
    #            tags: [ Attendance ]
    #            summary: Employee check-in
    #            requestBody:
    #                required: true
    #                content:
    #                    application/json:
    #                        schema:
    #                            type: object
    #                            properties:
    #                                employee_id:
    #                                    type: integer
    #                                    example: 1
    #                                work_arrangement_id:
    #                                    type: integer
    #                                    example: 1
    #                                ip_address:
    #                                    type: string
    #                                notes:
    #                                    type: string
    #            responses:
    #                200:
    #                    description: Check-in recorded successfully
    #                    content:
    #                        application/json:
    #                            schema:
    #                                allOf:
    #                                    -   $ref: "#/components/schemas/AttendanceLog"
    #                                    -   type: object
    #                                        properties:
    #                                            event_type:
    #                                                type: string
    #                                                enum: [ check_in ]
    #                400:
    #                    description: Invalid request
    #
    #    /attendance/check-out:
    #        post:
    #            tags: [ Attendance ]
    #            summary: Employee check-out
    #            requestBody:
    #                required: true
    #                content:
    #                    application/json:
    #                        schema:
    #                            type: object
    #                            properties:
    #                                employee_id:
    #                                    type: integer
    #                                    example: 1
    #                                work_arrangement_id:
    #                                    type: integer
    #                                    example: 1
    #                                ip_address:
    #                                    type: string
    #                                notes:
    #                                    type: string
    #            responses:
    #                200:
    #                    description: Check-out recorded successfully
    #                    content:
    #                        application/json:
    #                            schema:
    #                                allOf:
    #                                    -   $ref: "#/components/schemas/AttendanceLog"
    #                                    -   type: object
    #                                        properties:
    #                                            event_type:
    #                                                type: string
    #                                                enum: [ check_out ]
    #                400:
    #                    description: Invalid request
    #
    #    /attendance/logs:
    #        get:
    #            tags: [ Attendance ]
    #            summary: Get attendance logs
    #            parameters:
    #                -   in: query
    #                    name: start_date
    #                    schema:
    #                        type: string
    #                        format: date
    #                -   in: query
    #                    name: end_date
    #                    schema:
    #                        type: string
    #                        format: date
    #                -   in: query
    #                    name: employee_id
    #                    schema:
    #                        type: integer
    #            responses:
    #                200:
    #                    description: List of attendance logs
    #                    content:
    #                        application/json:
    #                            schema:
    #                                type: array
    #                                items:
    #                                    $ref: "#/components/schemas/AttendanceLog"
    #
    #    /daily-attendance:
    #        get:
    #            tags: [ Daily Attendance ]
    #            summary: Get daily attendance records
    #            parameters:
    #                -   in: query
    #                    name: start_date
    #                    schema:
    #                        type: string
    #                        format: date
    #                -   in: query
    #                    name: end_date
    #                    schema:
    #                        type: string
    #                        format: date
    #                -   in: query
    #                    name: employee_id
    #                    schema:
    #                        type: integer
    #            responses:
    #                200:
    #                    description: List of daily attendance records
    #                    content:
    #                        application/json:
    #                            schema:
    #                                type: array
    #                                items:
    #                                    $ref: "#/components/schemas/DailyAttendance"
    #
    #    /daily-attendance/{id}:
    #        get:
    #            tags: [ Daily Attendance ]
    #            summary: Get daily attendance by ID
    #            parameters:
    #                -   in: path
    #                    name: id
    #                    required: true
    #                    schema:
    #                        type: integer
    #            responses:
    #                200:
    #                    description: Daily attendance record
    #                    content:
    #                        application/json:
    #                            schema:
    #                                $ref: "#/components/schemas/DailyAttendance"
    #                404:
    #                    description: Attendance record not found
    #
    #    /overtime:
    #        post:
    #            tags: [ Overtime ]
    #            summary: Submit overtime request
    #            requestBody:
    #                required: true
    #                content:
    #                    application/json:
    #                        schema:
    #                            $ref: "#/components/schemas/OvertimeRequest"
    #            responses:
    #                201:
    #                    description: Overtime request submitted
    #
    #        get:
    #            tags: [ Overtime ]
    #            summary: Get overtime requests
    #            parameters:
    #                -   in: query
    #                    name: status
    #                    schema:
    #                        type: string
    #                        enum: [ pending, approved, rejected ]
    #                -   in: query
    #                    name: employee_id
    #                    schema:
    #                        type: integer
    #            responses:
    #                200:
    #                    description: List of overtime requests
    #                    content:
    #                        application/json:
    #                            schema:
    #                                type: array
    #                                items:
    #                                    $ref: "#/components/schemas/OvertimeRequest"
    #
    #    /overtime/{id}/approve:
    #        post:
    #            tags: [ Overtime ]
    #            summary: Approve/reject overtime request
    #            parameters:
    #                -   in: path
    #                    name: id
    #                    required: true
    #                    schema:
    #                        type: integer
    #            requestBody:
    #                required: true
    #                content:
    #                    application/json:
    #                        schema:
    #                            type: object
    #                            properties:
    #                                status:
    #                                    type: string
    #                                    enum: [ approved, rejected ]
    #                                notes:
    #                                    type: string
    #            responses:
    #                200:
    #                    description: Overtime request updated
    #
    #    /departments:
    #        get:
    #            tags: [ Departments ]
    #            summary: Get all departments
    #            responses:
    #                200:
    #                    description: List of all departments
    #                    content:
    #                        application/json:
    #                            schema:
    #                                type: array
    #                                items:
    #                                    $ref: "#/components/schemas/Department"
    #        post:
    #            tags: [ Departments ]
    #            summary: Create a new department
    #            requestBody:
    #                required: true
    #                content:
    #                    application/json:
    #                        schema:
    #                            type: object
    #                            properties:
    #                                name:
    #                                    type: string
    #                                description:
    #                                    type: string
    #                                active:
    #                                    type: boolean
    #            responses:
    #                201:
    #                    description: Department created successfully
    #                    content:
    #                        application/json:
    #                            schema:
    #                                $ref: "#/components/schemas/Department"
    #
    #    /departments/{id}:
    #        get:
    #            tags: [ Departments ]
    #            summary: Get department by ID
    #            parameters:
    #                -   in: path
    #                    name: id
    #                    required: true
    #                    schema:
    #                        type: integer
    #            responses:
    #                200:
    #                    description: Department details
    #                    content:
    #                        application/json:
    #                            schema:
    #                                $ref: "#/components/schemas/Department"
    #                404:
    #                    description: Department not found
    #        put:
    #            tags: [ Departments ]
    #            summary: Update department by ID
    #            parameters:
    #                -   in: path
    #                    name: id
    #                    required: true
    #                    schema:
    #                        type: integer
    #            requestBody:
    #                required: true
    #                content:
    #                    application/json:
    #                        schema:
    #                            type: object
    #                            properties:
    #                                name:
    #                                    type: string
    #                                description:
    #                                    type: string
    #                                active:
    #                                    type: boolean
    #            responses:
    #                200:
    #                    description: Department updated successfully
    #                    content:
    #                        application/json:
    #                            schema:
    #                                $ref: "#/components/schemas/Department"
    #                404:
    #                    description: Department not found
    #        delete:
    #            tags: [ Departments ]
    #            summary: Delete department by ID
    #            parameters:
    #                -   in: path
    #                    name: id
    #                    required: true
    #                    schema:
    #                        type: integer
    #            responses:
    #                204:
    #                    description: Department deleted successfully
    #                404:
    #                    description: Department not found

    /positions:
        get:
            tags: [Positions]
            summary: Get all positions
            responses:
                200:
                    description: List of positions
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/Position"

        post:
            tags: [Positions]
            summary: Create a new position
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                department_id:
                                    type: integer
            responses:
                201:
                    description: Position created successfully
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Position"

    /positions/{id}:
        get:
            tags: [Positions]
            summary: Get a position by ID
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                      type: integer
            responses:
                200:
                    description: Position details
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Position"
                404:
                    description: Position not found

        put:
            tags: [Positions]
            summary: Update a position by ID
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                      type: integer
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                department_id:
                                    type: integer
            responses:
                200:
                    description: Position updated successfully
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Position"
                404:
                    description: Position not found

        delete:
            tags: [Positions]
            summary: Delete a position by ID
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                      type: integer
            responses:
                204:
                    description: Position deleted successfully
                404:
                    description: Position not found

    /api/locations:
        get:
            tags: [Locations]
            summary: Get all locations
            parameters:
                - in: query
                  name: page
                  schema:
                      type: integer
                      minimum: 1
                      default: 1
                  description: Page number for pagination.
                - in: query
                  name: page_size
                  schema:
                      type: integer
                      minimum: 1
                      maximum: 100
                      default: 10
                  description: Number of items per page.
            responses:
                200:
                    description: List of locations
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 200
                                    message:
                                        type: string
                                        example: "Locations retrieved successfully"
                                    data:
                                        type: object
                                        properties:
                                            items:
                                                type: array
                                                items:
                                                    type: object
                                                    properties:
                                                        id:
                                                            type: integer
                                                            format: uint
                                                            example: 1
                                                        name:
                                                            type: string
                                                            example: "Jakarta"
                                                        address_detail:
                                                            type: string
                                                            example: "Jl. Sudirman No. 1, Jakarta Pusat, DKI Jakarta, 10220"
                                                        latitude:
                                                            type: number
                                                            example: -6.20876
                                                        longitude:
                                                            type: number
                                                            example: 106.84559
                                                        radius_m:
                                                            type: number
                                                            example: 100
                                            pagination:
                                                type: object
                                                properties:
                                                    total_items:
                                                        type: integer
                                                        format: int64
                                                        example: 100
                                                    total_pages:
                                                        type: integer
                                                        example: 10
                                                    current_page:
                                                        type: integer
                                                        example: 1
                                                    page_size:
                                                        type: integer
                                                        example: 10
                                                    has_next_page:
                                                        type: boolean
                                                        example: true
                                                    has_prev_page:
                                                        type: boolean
                                                        example: false
        post:
            tags: [Locations]
            summary: Create a new location
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                address_detail:
                                    type: string
                                latitude:
                                    type: number
                                longitude:
                                    type: number
                                radius_m:
                                    type: number

            responses:
                201:
                    description: Location created successfully
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Location"

    /api/locations/{id}:
        get:
            tags: [Locations]
            summary: Get a location by ID
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                      type: integer
            responses:
                200:
                    description: Location details
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 200
                                    message:
                                        type: string
                                        example: "Location retrieved successfully"
                                    data:
                                        type: object
                                        properties:
                                            id:
                                                type: integer
                                                example: 1
                                            name:
                                                type: string
                                                example: "Jakarta"
                                            address_detail:
                                                type: string
                                                example: "Jl. Sudirman No. 1, Jakarta Pusat, DKI Jakarta, 10220"
                                            latitude:
                                                type: number
                                                example: -6.20876
                                            longitude:
                                                type: number
                                                example: 106.84559
                                            radius_m:
                                                type: number
                                                example: 100
                404:
                    description: Location not found

        put:
            tags: [Locations]
            summary: Update a location by ID
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                      type: integer
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                address_detail:
                                    type: string
                                latitude:
                                    type: number
                                longitude:
                                    type: number
                                radius_m:
                                    type: number
            responses:
                200:
                    description: Location updated successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 200
                                    message:
                                        type: string
                                        example: "Location updated successfully"
                                    data:
                                        type: object
                                        properties:
                                            id:
                                                type: integer
                                                example: 1
                                            name:
                                                type: string
                                                example: "Jakarta"
                                            address_detail:
                                                type: string
                                                example: "Jl. Sudirman No. 1, Jakarta Pusat, DKI Jakarta, 12222"
                                            latitude:
                                                type: number
                                                example: -6.20876
                                            longitude:
                                                type: number
                                                example: 106.84559
                                            radius_m:
                                                type: number
                                                example: 100
                404:
                    description: Location not found

    /api/work-schedules:
        get:
            tags: [Work Schedules]
            summary: Get all work schedules
            description: Retrieves a list of all work schedules with pagination.
            parameters:
                - in: query
                  name: page
                  schema:
                      type: integer
                      minimum: 1
                      default: 1
                  description: Page number for pagination.
                - in: query
                  name: page_size
                  schema:
                      type: integer
                      minimum: 1
                      maximum: 100
                      default: 10
                  description: Number of items per page.
            responses:
                200:
                    description: List of work schedules retrieved successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 200
                                    message:
                                        type: string
                                        example: "Work schedules retrieved successfully"
                                    data:
                                        type: object
                                        properties:
                                            items:
                                                type: array
                                                items:
                                                    $ref: "#/components/schemas/WorkScheduleResponse"
                                            pagination:
                                                type: object
                                                properties:
                                                    total_items:
                                                        type: integer
                                                        format: int64
                                                        example: 100
                                                    total_pages:
                                                        type: integer
                                                        example: 10
                                                    current_page:
                                                        type: integer
                                                        example: 1
                                                    page_size:
                                                        type: integer
                                                        example: 10
                                                    has_next_page:
                                                        type: boolean
                                                        example: true
                                                    has_prev_page:
                                                        type: boolean
                                                        example: false

        post:
            tags: [Work Schedules]
            summary: Create new work schedule with details
            description: Creates a new work schedule along with its associated details (days, times, location for WFO).
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/WorkScheduleCreateRequest"
            responses:
                201:
                    description: Work schedule created successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 201
                                    message:
                                        type: string
                                        example: "Work schedule created successfully"
                                    data:
                                        $ref: "#/components/schemas/WorkScheduleResponse"
                400:
                    description: Bad request (e.g., validation error, invalid input)
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 400
                                    message:
                                        type: string
                                        example: "Bad request"
                                    error:
                                        type: string
                                        example: "Validation error"
                500:
                    description: Internal server error
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 500
                                    message:
                                        type: string
                                        example: "Internal server error"
                                    error:
                                        type: string
                                        example: "Failed to create work schedule"

    /api/documents/upload:
        post:
            tags: [Documents]
            summary: Upload a document
            description: Upload a document file for the authenticated user. The file will be stored in Supabase storage and a record will be created in the database linked to the user's employee record.
            security:
                - bearerAuth: []
            requestBody:
                required: true
                content:
                    multipart/form-data:
                        schema:
                            type: object
                            properties:
                                file:
                                    type: string
                                    format: binary
                                    description: The document file to upload (PDF or Word documents only)
                            required:
                                - file
            responses:
                201:
                    description: Document uploaded successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 201
                                    message:
                                        type: string
                                        example: "Document uploaded successfully"
                                    data:
                                        type: object
                                        properties:
                                            id:
                                                type: integer
                                                format: uint
                                                example: 1
                                            employee_id:
                                                type: integer
                                                format: uint
                                                example: 1
                                            name:
                                                type: string
                                                example: "John_Doe_Documents_123456789012345.pdf"
                                            url:
                                                type: string
                                                format: url
                                                example: "https://your-project.supabase.co/storage/v1/object/public/document/John_Doe_Documents_123456789012345.pdf"
                                            created_at:
                                                type: string
                                                format: date-time
                                                example: "2024-01-15T10:30:00Z"
                                            updated_at:
                                                type: string
                                                format: date-time
                                                example: "2024-01-15T10:30:00Z"
                400:
                    description: Bad request (e.g., missing file, invalid file type, user not authenticated)
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 400
                                    message:
                                        type: string
                                        example: "File type not allowed"
                                    error:
                                        type: string
                                        example: "File type not allowed. Allowed types: application/pdf, application/msword, application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                401:
                    description: Unauthorized
                500:
                    description: Internal server error

    /api/documents:
        get:
            tags: [Documents]
            summary: Get my documents
            description: Retrieve all documents belonging to the authenticated user.
            security:
                - bearerAuth: []
            responses:
                200:
                    description: Your documents retrieved successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 200
                                    message:
                                        type: string
                                        example: "Your documents retrieved successfully"
                                    data:
                                        type: array
                                        items:
                                            type: object
                                            properties:
                                                id:
                                                    type: integer
                                                    format: uint
                                                    example: 1
                                                employee_id:
                                                    type: integer
                                                    format: uint
                                                    example: 1
                                                name:
                                                    type: string
                                                    example: "John_Doe_Documents_123456789012345.pdf"
                                                url:
                                                    type: string
                                                    format: url
                                                    example: "https://your-project.supabase.co/storage/v1/object/public/document/John_Doe_Documents_123456789012345.pdf"
                                                created_at:
                                                    type: string
                                                    format: date-time
                                                    example: "2024-01-15T10:30:00Z"
                                                updated_at:
                                                    type: string
                                                    format: date-time
                                                    example: "2024-01-15T10:30:00Z"
                401:
                    description: Unauthorized - Invalid or missing authentication token
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 401
                                    message:
                                        type: string
                                        example: "User ID not found in context"
                                    error:
                                        type: string
                                        example: "missing userID in context"
                404:
                    description: Employee not found for current user
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 404
                                    message:
                                        type: string
                                        example: "Employee not found for current user"
                500:
                    description: Internal server error

    /api/documents/{id}:
        delete:
            tags: [Documents]
            summary: Delete document
            description: Delete a document by its ID. This will remove both the database record and the file from Supabase storage.
            security:
                - bearerAuth: []
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                      type: integer
                      format: uint
                  description: The document ID
                  example: 1
            responses:
                200:
                    description: Document deleted successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 200
                                    message:
                                        type: string
                                        example: "Document deleted successfully"
                                    data:
                                        type: object
                                        nullable: true
                400:
                    description: Invalid document ID
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 400
                                    message:
                                        type: string
                                        example: "Invalid document ID"
                                    error:
                                        type: string
                                        example: "strconv.ParseUint: parsing \"abc\": invalid syntax"
                404:
                    description: Document not found
                500:
                    description: Internal server error

    /health:
        get:
            summary: Health Check
            description: Returns the health status of the API
            operationId: getHealthStatus
            responses:
                "200":
                    description: Successful operation
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: string
                                        example: healthy
                                    timestamp:
                                        type: string
                                        format: date-time
                                        example: 2023-03-17T12:00:00Z

    /status:
        get:
            summary: Get API status
            description: Returns the current status of the API
            operationId: getApiStatus
            responses:
                "200":
                    description: Successful operation
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: string
                                        example: success
                                    message:
                                        type: string
                                        example: API is running
                                    data:
                                        type: object
                                        properties:
                                            version:
                                                type: string
                                                example: 1.0.0
                                            environment:
                                                type: string
                                                example: production
                                            server_time:
                                                type: string
                                                format: date-time
                                                example: 2023-03-17T12:00:00Z

    /api/subscription/plans:
        get:
            tags: [Subscription]
            summary: Get all subscription plans
            description: Retrieve all available subscription plans with their seat plans and features. No authentication required.
            security: []
            responses:
                200:
                    description: Subscription plans retrieved successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 200
                                    message:
                                        type: string
                                        example: "Subscription plans retrieved successfully"
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/SubscriptionPlanResponse"
                500:
                    description: Internal server error
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 500
                                    message:
                                        type: string
                                        example: "Internal server error"
                                    error:
                                        type: string
                                        example: "Failed to retrieve subscription plans"

    /api/subscription/plans/{subscription_plan_id}/seat-plans:
        get:
            tags: [Subscription]
            summary: Get seat plans for a subscription plan
            description: Retrieve all seat plans for a specific subscription plan. No authentication required.
            security: []
            parameters:
                - in: path
                  name: subscription_plan_id
                  required: true
                  description: ID of the subscription plan
                  schema:
                      type: integer
                      format: uint
                      example: 1
            responses:
                200:
                    description: Seat plans retrieved successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 200
                                    message:
                                        type: string
                                        example: "Seat plans retrieved successfully"
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/SeatPlanResponse"
                400:
                    description: Invalid subscription plan ID
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 400
                                    message:
                                        type: string
                                        example: "Bad request"
                                    error:
                                        type: string
                                        example: "Subscription plan ID must be a valid number"
                500:
                    description: Internal server error
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 500
                                    message:
                                        type: string
                                        example: "Internal server error"
                                    error:
                                        type: string
                                        example: "Failed to retrieve seat plans"

    /api/subscription/checkout/trial:
        post:
            tags: [Subscription]
            summary: Initiate trial checkout
            description: Start a 14-day free trial checkout process. Requires authentication.
            security:
                - bearerAuth: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/InitiateTrialCheckoutRequest"
            responses:
                200:
                    description: Trial checkout initiated successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 200
                                    message:
                                        type: string
                                        example: "Trial checkout initiated successfully"
                                    data:
                                        $ref: "#/components/schemas/CheckoutSessionResponse"
                400:
                    description: Bad request
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 400
                                    message:
                                        type: string
                                        example: "Bad request"
                                    error:
                                        type: string
                                        example: "Missing required fields"
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 401
                                    message:
                                        type: string
                                        example: "Unauthorized"
                                    error:
                                        type: string
                                        example: "User ID not found in context"
                500:
                    description: Internal server error
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 500
                                    message:
                                        type: string
                                        example: "Internal server error"
                                    error:
                                        type: string
                                        example: "Failed to initiate trial checkout"

    /api/subscription/checkout/paid:
        post:
            tags: [Subscription]
            summary: Initiate paid checkout
            description: Start a paid subscription checkout process with Xendit payment integration. Requires authentication.
            security:
                - bearerAuth: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/InitiatePaidCheckoutRequest"
            responses:
                200:
                    description: Paid checkout initiated successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 200
                                    message:
                                        type: string
                                        example: "Paid checkout initiated successfully"
                                    data:
                                        $ref: "#/components/schemas/InitiatePaidCheckoutResponse"
                400:
                    description: Bad request
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 400
                                    message:
                                        type: string
                                        example: "Bad request"
                                    error:
                                        type: string
                                        example: "Missing required fields"
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 401
                                    message:
                                        type: string
                                        example: "Unauthorized"
                                    error:
                                        type: string
                                        example: "User ID not found in context"
                500:
                    description: Internal server error
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 500
                                    message:
                                        type: string
                                        example: "Internal server error"
                                    error:
                                        type: string
                                        example: "Failed to initiate paid checkout"

    /api/subscription/checkout/complete-trial:
        post:
            tags: [Subscription]
            summary: Complete trial checkout
            description: Complete the trial checkout by providing billing information and activate the trial subscription. Requires authentication.
            security:
                - bearerAuth: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/CompleteTrialCheckoutRequest"
            responses:
                200:
                    description: Trial checkout completed successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 200
                                    message:
                                        type: string
                                        example: "Trial checkout completed successfully"
                                    data:
                                        $ref: "#/components/schemas/SubscriptionResponse"
                400:
                    description: Bad request
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 400
                                    message:
                                        type: string
                                        example: "Bad request"
                                    error:
                                        type: string
                                        example: "Session is not for trial checkout"
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 401
                                    message:
                                        type: string
                                        example: "Unauthorized"
                                    error:
                                        type: string
                                        example: "User ID not found in context"
                500:
                    description: Internal server error
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 500
                                    message:
                                        type: string
                                        example: "Internal server error"
                                    error:
                                        type: string
                                        example: "Failed to complete trial checkout"

    /api/subscription/me:
        get:
            tags: [Subscription]
            summary: Get current user's subscription
            description: Retrieve the current user's subscription details. Requires authentication.
            security:
                - bearerAuth: []
            responses:
                200:
                    description: User subscription retrieved successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 200
                                    message:
                                        type: string
                                        example: "User subscription retrieved successfully"
                                    data:
                                        $ref: "#/components/schemas/SubscriptionResponse"
                401:
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 401
                                    message:
                                        type: string
                                        example: "Unauthorized"
                                    error:
                                        type: string
                                        example: "User ID not found in context"
                404:
                    description: Subscription not found
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 404
                                    message:
                                        type: string
                                        example: "Subscription not found"
                                    error:
                                        type: string
                                        example: "No subscription found for user"
                500:
                    description: Internal server error
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 500
                                    message:
                                        type: string
                                        example: "Internal server error"
                                    error:
                                        type: string
                                        example: "Failed to retrieve user subscription"

    /api/subscription/checkout/{session_id}:
        get:
            tags: [Subscription]
            summary: Get checkout session details
            description: Retrieve details of a specific checkout session. No authentication required.
            security: []
            parameters:
                - in: path
                  name: session_id
                  required: true
                  description: Checkout session ID
                  schema:
                      type: string
                      example: "550e8400-e29b-41d4-a716-446655440000"
            responses:
                200:
                    description: Checkout session retrieved successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 200
                                    message:
                                        type: string
                                        example: "Checkout session retrieved successfully"
                                    data:
                                        $ref: "#/components/schemas/CheckoutSessionResponse"
                400:
                    description: Bad request
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 400
                                    message:
                                        type: string
                                        example: "Bad request"
                                    error:
                                        type: string
                                        example: "Session ID is required"
                404:
                    description: Checkout session not found
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 404
                                    message:
                                        type: string
                                        example: "Checkout session not found"
                                    error:
                                        type: string
                                        example: "Session not found"
                500:
                    description: Internal server error
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 500
                                    message:
                                        type: string
                                        example: "Internal server error"
                                    error:
                                        type: string
                                        example: "Failed to retrieve checkout session"

    /webhooks/xendit:
        post:
            tags: [Webhooks]
            summary: Process Xendit payment webhooks
            description: Handle payment notifications from Xendit payment gateway. No authentication required as it uses callback token verification.
            security: []
            parameters:
                - in: header
                  name: X-CALLBACK-TOKEN
                  required: true
                  description: Xendit callback token for verification
                  schema:
                      type: string
                      example: "xendit_callback_token_123"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            description: Xendit webhook payload
                            properties:
                                webhook_type:
                                    type: string
                                    enum:
                                        [
                                            invoice.paid,
                                            invoice.expired,
                                            invoice.failed,
                                        ]
                                    description: Type of webhook event
                                    example: "invoice.paid"
                                id:
                                    type: string
                                    description: Xendit invoice ID
                                    example: "inv_123456"
                                external_id:
                                    type: string
                                    description: External ID set during invoice creation
                                    example: "checkout_550e8400-e29b-41d4-a716-446655440000"
                                paid_at:
                                    type: string
                                    format: date-time
                                    description: When the invoice was paid (for paid events)
                                    example: "2024-01-01T12:00:00Z"
                                payment_method:
                                    type: string
                                    description: Payment method used
                                    example: "BANK_TRANSFER"
                            required:
                                - webhook_type
                                - id
                                - external_id
            responses:
                200:
                    description: Webhook processed successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 200
                                    message:
                                        type: string
                                        example: "Webhook processed successfully"
                                    data:
                                        type: object
                                        nullable: true
                                        example: null
                400:
                    description: Bad request
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 400
                                    message:
                                        type: string
                                        example: "Bad request"
                                    error:
                                        type: string
                                        example: "Missing callback token"
                500:
                    description: Internal server error
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 500
                                    message:
                                        type: string
                                        example: "Internal server error"
                                    error:
                                        type: string
                                        example: "Failed to process webhook"

    /api/branches:
        post:
            tags: [Branches]
            summary: Create a new branch
            description: Create a new branch for the authenticated HR user
            security:
                - bearerAuth: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/BranchCreateRequest"
            responses:
                201:
                    description: Branch created successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 201
                                    message:
                                        type: string
                                        example: "Branch created successfully"
                                    data:
                                        $ref: "#/components/schemas/Branch"
                400:
                    description: Bad request
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 400
                                    message:
                                        type: string
                                        example: "Invalid request data"
                                    error:
                                        type: string
                                        example: "Missing required fields"
                401:
                    description: Unauthorized
                500:
                    description: Internal server error

        get:
            tags: [Branches]
            summary: Get my branches
            description: Retrieve all branches managed by the authenticated HR user
            security:
                - bearerAuth: []
            responses:
                200:
                    description: Branches retrieved successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 200
                                    message:
                                        type: string
                                        example: "Branches retrieved successfully"
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Branch"
                401:
                    description: Unauthorized
                500:
                    description: Internal server error

    /api/branches/{id}:
        put:
            tags: [Branches]
            summary: Update a branch
            description: Update an existing branch
            security:
                - bearerAuth: []
            parameters:
                - in: path
                  name: id
                  required: true
                  description: Branch ID
                  schema:
                      type: integer
                      format: uint
                      example: 1
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/BranchUpdateRequest"
            responses:
                200:
                    description: Branch updated successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 200
                                    message:
                                        type: string
                                        example: "Branch updated successfully"
                                    data:
                                        $ref: "#/components/schemas/Branch"
                400:
                    description: Bad request
                401:
                    description: Unauthorized
                404:
                    description: Branch not found
                500:
                    description: Internal server error

        delete:
            tags: [Branches]
            summary: Delete a branch
            description: Delete an existing branch
            security:
                - bearerAuth: []
            parameters:
                - in: path
                  name: id
                  required: true
                  description: Branch ID
                  schema:
                      type: integer
                      format: uint
                      example: 1
            responses:
                200:
                    description: Branch deleted successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 200
                                    message:
                                        type: string
                                        example: "Branch deleted successfully"
                                    data:
                                        type: object
                                        nullable: true
                400:
                    description: Invalid ID format
                401:
                    description: Unauthorized
                404:
                    description: Branch not found
                500:
                    description: Internal server error

    /api/positions:
        post:
            tags: [Positions]
            summary: Create a new position
            description: Create a new position for the authenticated HR user
            security:
                - bearerAuth: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/PositionCreateRequest"
            responses:
                201:
                    description: Position created successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 201
                                    message:
                                        type: string
                                        example: "Position created successfully"
                                    data:
                                        $ref: "#/components/schemas/Position"
                400:
                    description: Bad request
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 400
                                    message:
                                        type: string
                                        example: "Invalid request data"
                                    error:
                                        type: string
                                        example: "Missing required fields"
                401:
                    description: Unauthorized
                500:
                    description: Internal server error

        get:
            tags: [Positions]
            summary: Get my positions
            description: Retrieve all positions managed by the authenticated HR user
            security:
                - bearerAuth: []
            responses:
                200:
                    description: Positions retrieved successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 200
                                    message:
                                        type: string
                                        example: "Positions retrieved successfully"
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Position"
                401:
                    description: Unauthorized
                500:
                    description: Internal server error

    /api/positions/{id}:
        put:
            tags: [Positions]
            summary: Update a position
            description: Update an existing position
            security:
                - bearerAuth: []
            parameters:
                - in: path
                  name: id
                  required: true
                  description: Position ID
                  schema:
                      type: integer
                      format: uint
                      example: 1
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/PositionUpdateRequest"
            responses:
                200:
                    description: Position updated successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 200
                                    message:
                                        type: string
                                        example: "Position updated successfully"
                                    data:
                                        $ref: "#/components/schemas/Position"
                400:
                    description: Bad request
                401:
                    description: Unauthorized
                404:
                    description: Position not found
                500:
                    description: Internal server error

        delete:
            tags: [Positions]
            summary: Delete a position
            description: Delete an existing position
            security:
                - bearerAuth: []
            parameters:
                - in: path
                  name: id
                  required: true
                  description: Position ID
                  schema:
                      type: integer
                      format: uint
                      example: 1
            responses:
                200:
                    description: Position deleted successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 200
                                    message:
                                        type: string
                                        example: "Position deleted successfully"
                                    data:
                                        type: object
                                        nullable: true
                400:
                    description: Invalid ID format
                401:
                    description: Unauthorized
                404:
                    description: Position not found
                500:
                    description: Internal server error

security:
    - bearerAuth: []
